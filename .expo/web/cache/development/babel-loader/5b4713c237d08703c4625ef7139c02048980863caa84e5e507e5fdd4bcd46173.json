{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { StatusBar as ExpoStatusBar } from 'expo-status-bar';\nimport MainScreen from \"./src/screens/MainScreen\";\nimport AuthScreen from \"./src/screens/AuthScreen\";\nimport SettingsScreen from \"./src/screens/SettingsScreen\";\nimport ProfileScreen from \"./src/screens/ProfileScreen\";\nimport AdminScreen from \"./src/screens/AdminScreen\";\nimport DocsScreen from \"./src/screens/DocsScreen\";\nimport { ThemeProvider } from \"./src/context/ThemeContext\";\nimport { AuthProvider } from \"./src/context/AuthContext\";\nimport { ChatProvider } from \"./src/context/ChatContext\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar LightTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n  colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n    primary: '#667eea',\n    background: '#f8fafc',\n    card: '#ffffff',\n    text: '#1a202c',\n    border: '#e2e8f0',\n    notification: '#667eea'\n  })\n});\nvar CustomDarkTheme = _objectSpread(_objectSpread({}, DarkTheme), {}, {\n  colors: _objectSpread(_objectSpread({}, DarkTheme.colors), {}, {\n    primary: '#667eea',\n    background: '#1a202c',\n    card: '#2d3748',\n    text: '#f7fafc',\n    border: '#4a5568',\n    notification: '#667eea'\n  })\n});\nvar ProTheme = _objectSpread(_objectSpread({}, DarkTheme), {}, {\n  colors: _objectSpread(_objectSpread({}, DarkTheme.colors), {}, {\n    primary: '#ffd700',\n    background: '#0a0a0f',\n    card: '#1a1a2e',\n    text: '#e6e6fa',\n    border: '#2d2d4a',\n    notification: '#ffd700'\n  })\n});\nfunction App() {\n  var systemColorScheme = useColorScheme();\n  var _useState = useState('light'),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentTheme = _useState2[0],\n    setCurrentTheme = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  useEffect(function () {\n    loadThemeFromStorage();\n  }, []);\n  var loadThemeFromStorage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var savedTheme = yield AsyncStorage.getItem('talkie-theme');\n        if (savedTheme) {\n          setCurrentTheme(savedTheme);\n        } else {\n          setCurrentTheme(systemColorScheme || 'light');\n        }\n      } catch (error) {\n        console.log('Error loading theme:', error);\n        setCurrentTheme(systemColorScheme || 'light');\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function loadThemeFromStorage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var getNavigationTheme = function getNavigationTheme() {\n    switch (currentTheme) {\n      case 'dark':\n        return CustomDarkTheme;\n      case 'pro':\n        return ProTheme;\n      default:\n        return LightTheme;\n    }\n  };\n  if (isLoading) {\n    return null;\n  }\n  return _jsx(ThemeProvider, {\n    children: _jsx(AuthProvider, {\n      children: _jsx(ChatProvider, {\n        children: _jsxs(NavigationContainer, {\n          theme: getNavigationTheme(),\n          children: [_jsx(ExpoStatusBar, {\n            style: currentTheme === 'light' ? 'dark' : 'light',\n            backgroundColor: getNavigationTheme().colors.background\n          }), _jsxs(Stack.Navigator, {\n            initialRouteName: \"Main\",\n            screenOptions: {\n              headerShown: false,\n              gestureEnabled: true,\n              cardStyleInterpolator: function cardStyleInterpolator(_ref2) {\n                var current = _ref2.current,\n                  layouts = _ref2.layouts;\n                return {\n                  cardStyle: {\n                    transform: [{\n                      translateX: current.progress.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layouts.screen.width, 0]\n                      })\n                    }]\n                  }\n                };\n              }\n            },\n            children: [_jsx(Stack.Screen, {\n              name: \"Main\",\n              component: MainScreen\n            }), _jsx(Stack.Screen, {\n              name: \"Auth\",\n              component: AuthScreen,\n              options: {\n                presentation: 'modal',\n                headerShown: false\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Settings\",\n              component: SettingsScreen,\n              options: {\n                presentation: 'modal',\n                headerShown: true,\n                title: 'Settings'\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Profile\",\n              component: ProfileScreen,\n              options: {\n                presentation: 'modal',\n                headerShown: true,\n                title: 'Profile'\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Admin\",\n              component: AdminScreen,\n              options: {\n                presentation: 'modal',\n                headerShown: true,\n                title: 'Admin Dashboard'\n              }\n            }), _jsx(Stack.Screen, {\n              name: \"Docs\",\n              component: DocsScreen,\n              options: {\n                presentation: 'modal',\n                headerShown: true,\n                title: 'Documentation'\n              }\n            })]\n          })]\n        })\n      })\n    })\n  });\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","NavigationContainer","DefaultTheme","DarkTheme","createStackNavigator","StatusBar","useColorScheme","AsyncStorage","ExpoStatusBar","MainScreen","AuthScreen","SettingsScreen","ProfileScreen","AdminScreen","DocsScreen","ThemeProvider","AuthProvider","ChatProvider","jsx","_jsx","jsxs","_jsxs","Stack","LightTheme","_objectSpread","colors","primary","background","card","text","border","notification","CustomDarkTheme","ProTheme","App","systemColorScheme","_useState","_useState2","_slicedToArray","currentTheme","setCurrentTheme","_useState3","_useState4","isLoading","setIsLoading","loadThemeFromStorage","_ref","_asyncToGenerator","savedTheme","getItem","error","console","log","apply","arguments","getNavigationTheme","children","theme","style","backgroundColor","Navigator","initialRouteName","screenOptions","headerShown","gestureEnabled","cardStyleInterpolator","_ref2","current","layouts","cardStyle","transform","translateX","progress","interpolate","inputRange","outputRange","screen","width","Screen","name","component","options","presentation","title"],"sources":["/home/runner/work/app/app/App.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport {StatusBar, useColorScheme} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {StatusBar as ExpoStatusBar} from 'expo-status-bar';\n\n// Import screens\nimport MainScreen from './src/screens/MainScreen';\nimport AuthScreen from './src/screens/AuthScreen';\nimport SettingsScreen from './src/screens/SettingsScreen';\nimport ProfileScreen from './src/screens/ProfileScreen';\nimport AdminScreen from './src/screens/AdminScreen';\nimport DocsScreen from './src/screens/DocsScreen';\n\n// Import context\nimport {ThemeProvider} from './src/context/ThemeContext';\nimport {AuthProvider} from './src/context/AuthContext';\nimport {ChatProvider} from './src/context/ChatContext';\n\nconst Stack = createStackNavigator();\n\n// Custom themes for the app\nconst LightTheme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#667eea',\n    background: '#f8fafc',\n    card: '#ffffff',\n    text: '#1a202c',\n    border: '#e2e8f0',\n    notification: '#667eea',\n  },\n};\n\nconst CustomDarkTheme = {\n  ...DarkTheme,\n  colors: {\n    ...DarkTheme.colors,\n    primary: '#667eea',\n    background: '#1a202c',\n    card: '#2d3748',\n    text: '#f7fafc',\n    border: '#4a5568',\n    notification: '#667eea',\n  },\n};\n\nconst ProTheme = {\n  ...DarkTheme,\n  colors: {\n    ...DarkTheme.colors,\n    primary: '#ffd700',\n    background: '#0a0a0f',\n    card: '#1a1a2e',\n    text: '#e6e6fa',\n    border: '#2d2d4a',\n    notification: '#ffd700',\n  },\n};\n\nfunction App() {\n  const systemColorScheme = useColorScheme();\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadThemeFromStorage();\n  }, []);\n\n  const loadThemeFromStorage = async () => {\n    try {\n      const savedTheme = await AsyncStorage.getItem('talkie-theme');\n      if (savedTheme) {\n        setCurrentTheme(savedTheme);\n      } else {\n        setCurrentTheme(systemColorScheme || 'light');\n      }\n    } catch (error) {\n      console.log('Error loading theme:', error);\n      setCurrentTheme(systemColorScheme || 'light');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getNavigationTheme = () => {\n    switch (currentTheme) {\n      case 'dark':\n        return CustomDarkTheme;\n      case 'pro':\n        return ProTheme;\n      default:\n        return LightTheme;\n    }\n  };\n\n  if (isLoading) {\n    return null; // You can add a loading screen here\n  }\n\n  return (\n    <ThemeProvider>\n      <AuthProvider>\n        <ChatProvider>\n          <NavigationContainer theme={getNavigationTheme()}>\n            <ExpoStatusBar\n              style={currentTheme === 'light' ? 'dark' : 'light'}\n              backgroundColor={getNavigationTheme().colors.background}\n            />\n            <Stack.Navigator\n              initialRouteName=\"Main\"\n              screenOptions={{\n                headerShown: false,\n                gestureEnabled: true,\n                cardStyleInterpolator: ({current, layouts}) => {\n                  return {\n                    cardStyle: {\n                      transform: [\n                        {\n                          translateX: current.progress.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [layouts.screen.width, 0],\n                          }),\n                        },\n                      ],\n                    },\n                  };\n                },\n              }}>\n              <Stack.Screen name=\"Main\" component={MainScreen} />\n              <Stack.Screen \n                name=\"Auth\" \n                component={AuthScreen}\n                options={{\n                  presentation: 'modal',\n                  headerShown: false,\n                }}\n              />\n              <Stack.Screen \n                name=\"Settings\" \n                component={SettingsScreen}\n                options={{\n                  presentation: 'modal',\n                  headerShown: true,\n                  title: 'Settings',\n                }}\n              />\n              <Stack.Screen \n                name=\"Profile\" \n                component={ProfileScreen}\n                options={{\n                  presentation: 'modal',\n                  headerShown: true,\n                  title: 'Profile',\n                }}\n              />\n              <Stack.Screen \n                name=\"Admin\" \n                component={AdminScreen}\n                options={{\n                  presentation: 'modal',\n                  headerShown: true,\n                  title: 'Admin Dashboard',\n                }}\n              />\n              <Stack.Screen \n                name=\"Docs\" \n                component={DocsScreen}\n                options={{\n                  presentation: 'modal',\n                  headerShown: true,\n                  title: 'Documentation',\n                }}\n              />\n            </Stack.Navigator>\n          </NavigationContainer>\n        </ChatProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}