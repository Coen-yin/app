{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useAuth } from \"./AuthContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ChatContext = createContext();\nexport var useChat = function useChat() {\n  var context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\nvar GROQ_API_KEY = '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';\nvar API_URL = 'https://api.groq.com/openai/v1/chat/completions';\nexport var ChatProvider = function ChatProvider(_ref) {\n  var children = _ref.children;\n  var _useAuth = useAuth(),\n    currentUser = _useAuth.currentUser;\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    chats = _useState2[0],\n    setChats = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentChatId = _useState4[0],\n    setCurrentChatId = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoading = _useState6[0],\n    setIsLoading = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isGenerating = _useState8[0],\n    setIsGenerating = _useState8[1];\n  var _useState9 = useState({}),\n    _useState0 = _slicedToArray(_useState9, 2),\n    userMemory = _useState0[0],\n    setUserMemory = _useState0[1];\n  var _useState1 = useState({\n      contextLength: 10,\n      responseStyle: 'balanced',\n      enableMemory: true,\n      enableFollowUps: true,\n      personalityMode: 'friendly',\n      rememberPreferences: true\n    }),\n    _useState10 = _slicedToArray(_useState1, 2),\n    conversationSettings = _useState10[0],\n    setConversationSettings = _useState10[1];\n  useEffect(function () {\n    loadChatsFromStorage();\n    loadUserMemory();\n    loadConversationSettings();\n  }, []);\n  var loadChatsFromStorage = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var chatsData = yield AsyncStorage.getItem('talkie-chats');\n        if (chatsData) {\n          setChats(JSON.parse(chatsData));\n        }\n      } catch (error) {\n        console.log('Error loading chats:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function loadChatsFromStorage() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadUserMemory = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var memoryData = yield AsyncStorage.getItem('talkie-user-memory');\n        if (memoryData) {\n          setUserMemory(JSON.parse(memoryData));\n        }\n      } catch (error) {\n        console.log('Error loading user memory:', error);\n      }\n    });\n    return function loadUserMemory() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var loadConversationSettings = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var settingsData = yield AsyncStorage.getItem('talkie-conversation-settings');\n        if (settingsData) {\n          setConversationSettings(JSON.parse(settingsData));\n        }\n      } catch (error) {\n        console.log('Error loading conversation settings:', error);\n      }\n    });\n    return function loadConversationSettings() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var saveChats = function () {\n    var _ref5 = _asyncToGenerator(function* (updatedChats) {\n      try {\n        yield AsyncStorage.setItem('talkie-chats', JSON.stringify(updatedChats));\n      } catch (error) {\n        console.log('Error saving chats:', error);\n      }\n    });\n    return function saveChats(_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var saveUserMemory = function () {\n    var _ref6 = _asyncToGenerator(function* (memory) {\n      try {\n        yield AsyncStorage.setItem('talkie-user-memory', JSON.stringify(memory));\n      } catch (error) {\n        console.log('Error saving user memory:', error);\n      }\n    });\n    return function saveUserMemory(_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var saveConversationSettings = function () {\n    var _ref7 = _asyncToGenerator(function* (settings) {\n      try {\n        yield AsyncStorage.setItem('talkie-conversation-settings', JSON.stringify(settings));\n      } catch (error) {\n        console.log('Error saving conversation settings:', error);\n      }\n    });\n    return function saveConversationSettings(_x3) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var generateChatId = function generateChatId() {\n    return 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  };\n  var startNewChat = function startNewChat() {\n    var chatId = generateChatId();\n    var newChat = {\n      id: chatId,\n      title: 'New Chat',\n      messages: [],\n      timestamp: Date.now()\n    };\n    var updatedChats = _objectSpread(_objectSpread({}, chats), {}, _defineProperty({}, chatId, newChat));\n    setChats(updatedChats);\n    setCurrentChatId(chatId);\n    saveChats(updatedChats);\n    return chatId;\n  };\n  var loadChat = function loadChat(chatId) {\n    if (chats[chatId]) {\n      setCurrentChatId(chatId);\n      return true;\n    }\n    return false;\n  };\n  var deleteChat = function () {\n    var _ref8 = _asyncToGenerator(function* (chatId) {\n      try {\n        var updatedChats = _objectSpread({}, chats);\n        delete updatedChats[chatId];\n        if (currentChatId === chatId) {\n          setCurrentChatId(null);\n        }\n        setChats(updatedChats);\n        yield saveChats(updatedChats);\n        Alert.alert('Success', 'Chat deleted successfully.');\n        return true;\n      } catch (error) {\n        console.log('Error deleting chat:', error);\n        Alert.alert('Error', 'Failed to delete conversation.');\n        return false;\n      }\n    });\n    return function deleteChat(_x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var clearAllChats = function () {\n    var _ref9 = _asyncToGenerator(function* () {\n      try {\n        setChats({});\n        setCurrentChatId(null);\n        yield AsyncStorage.setItem('talkie-chats', '{}');\n        Alert.alert('Success', 'All conversations have been deleted.');\n        return true;\n      } catch (error) {\n        console.log('Error clearing chats:', error);\n        return false;\n      }\n    });\n    return function clearAllChats() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var updateUserMemory = function updateUserMemory(userMessage, aiResponse) {\n    if (!conversationSettings.enableMemory || !currentUser) {\n      return;\n    }\n    var userEmail = currentUser.email;\n    var memory = userMemory[userEmail] || {\n      preferences: {},\n      topics: [],\n      conversationHistory: [],\n      lastActive: new Date().toISOString(),\n      personalInfo: {},\n      interests: [],\n      conversationStyle: 'balanced'\n    };\n    memory.lastActive = new Date().toISOString();\n    var topics = extractTopicsFromText(userMessage + ' ' + aiResponse);\n    topics.forEach(function (topic) {\n      if (!memory.topics.includes(topic)) {\n        memory.topics.push(topic);\n      }\n    });\n    if (memory.topics.length > 50) {\n      memory.topics = memory.topics.slice(-50);\n    }\n    var entry = {\n      timestamp: new Date().toISOString(),\n      userMessage: userMessage.substring(0, 100),\n      aiResponse: aiResponse.substring(0, 100),\n      chatId: currentChatId\n    };\n    memory.conversationHistory.push(entry);\n    if (memory.conversationHistory.length > 100) {\n      memory.conversationHistory = memory.conversationHistory.slice(-100);\n    }\n    var updatedMemory = _objectSpread(_objectSpread({}, userMemory), {}, _defineProperty({}, userEmail, memory));\n    setUserMemory(updatedMemory);\n    saveUserMemory(updatedMemory);\n  };\n  var extractTopicsFromText = function extractTopicsFromText(text) {\n    var topics = [];\n    var topicKeywords = ['javascript', 'python', 'react', 'node', 'html', 'css', 'programming', 'machine learning', 'ai', 'blockchain', 'cryptocurrency', 'web development', 'mobile app', 'database', 'api', 'algorithm', 'data structure', 'travel', 'recipe', 'workout', 'health', 'business', 'marketing', 'design', 'writing', 'education', 'science', 'physics', 'chemistry', 'biology', 'math', 'history', 'literature', 'philosophy'];\n    var lowerText = text.toLowerCase();\n    topicKeywords.forEach(function (keyword) {\n      if (lowerText.includes(keyword)) {\n        topics.push(keyword);\n      }\n    });\n    return topics;\n  };\n  var addMessage = function addMessage(role, content) {\n    if (!currentChatId || !chats[currentChatId]) return;\n    var message = {\n      role: role,\n      content: content,\n      timestamp: Date.now()\n    };\n    var updatedChats = _objectSpread({}, chats);\n    updatedChats[currentChatId].messages.push(message);\n    if (role === 'user' && updatedChats[currentChatId].messages.length === 1) {\n      updatedChats[currentChatId].title = content.length > 40 ? content.substring(0, 40) + '...' : content;\n    }\n    setChats(updatedChats);\n    saveChats(updatedChats);\n    if (role === 'assistant') {\n      var _updatedChats$current;\n      var userMessage = ((_updatedChats$current = updatedChats[currentChatId].messages[updatedChats[currentChatId].messages.length - 2]) == null ? void 0 : _updatedChats$current.content) || '';\n      updateUserMemory(userMessage, content);\n    }\n  };\n  var getAIResponse = function () {\n    var _ref0 = _asyncToGenerator(function* (userMessage) {\n      setIsGenerating(true);\n      try {\n        var chat = chats[currentChatId];\n        var contextMessages = getEnhancedContext(chat);\n        var systemContent = createSystemMessage();\n        var messages = [{\n          role: 'system',\n          content: systemContent\n        }].concat(_toConsumableArray(contextMessages), [{\n          role: 'user',\n          content: userMessage\n        }]);\n        var response = yield fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${GROQ_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: 'openai/gpt-oss-120b',\n            messages: messages,\n            temperature: 0.3,\n            max_tokens: 1500,\n            top_p: 0.9,\n            stream: false\n          })\n        });\n        if (!response.ok) {\n          var _errorData$error;\n          var errorData = yield response.json().catch(function () {\n            return null;\n          });\n          throw new Error(`API Error ${response.status}: ${(errorData == null ? void 0 : (_errorData$error = errorData.error) == null ? void 0 : _errorData$error.message) || response.statusText}`);\n        }\n        var data = yield response.json();\n        if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n          throw new Error('Invalid API response format');\n        }\n        return data.choices[0].message.content;\n      } catch (error) {\n        console.error('AI Response Error:', error);\n        if (error.message.includes('401')) {\n          throw new Error('Invalid API key');\n        } else if (error.message.includes('429')) {\n          throw new Error('Rate limit exceeded. Please wait a moment');\n        } else if (error.message.includes('500')) {\n          throw new Error('Server error. Please try again');\n        } else {\n          throw new Error(error.message);\n        }\n      } finally {\n        setIsGenerating(false);\n      }\n    });\n    return function getAIResponse(_x5) {\n      return _ref0.apply(this, arguments);\n    };\n  }();\n  var getEnhancedContext = function getEnhancedContext(chat) {\n    if (!chat || !chat.messages) return [];\n    var contextLength = conversationSettings.contextLength || 10;\n    var recentMessages = chat.messages.slice(-contextLength);\n    var contextMessages = [];\n    if (conversationSettings.enableMemory && currentUser && userMemory[currentUser.email]) {\n      var memory = userMemory[currentUser.email];\n      var memoryContext = buildMemoryContext(memory);\n      if (memoryContext) {\n        contextMessages.push({\n          role: 'system',\n          content: memoryContext\n        });\n      }\n    }\n    contextMessages.push.apply(contextMessages, _toConsumableArray(recentMessages.map(function (msg) {\n      return {\n        role: msg.role,\n        content: msg.content\n      };\n    })));\n    return contextMessages;\n  };\n  var buildMemoryContext = function buildMemoryContext(memory) {\n    var contextParts = [];\n    if (memory.personalInfo && Object.keys(memory.personalInfo).length > 0) {\n      contextParts.push(`User's personal information: ${JSON.stringify(memory.personalInfo)}`);\n    }\n    if (memory.preferences && Object.keys(memory.preferences).length > 0) {\n      contextParts.push(`User's preferences: ${JSON.stringify(memory.preferences)}`);\n    }\n    if (memory.interests && memory.interests.length > 0) {\n      contextParts.push(`User's interests: ${memory.interests.join(', ')}`);\n    }\n    if (memory.topics && memory.topics.length > 0) {\n      var recentTopics = memory.topics.slice(-5);\n      contextParts.push(`Recent conversation topics: ${recentTopics.join(', ')}`);\n    }\n    return contextParts.length > 0 ? contextParts.join('\\n') : null;\n  };\n  var createSystemMessage = function createSystemMessage() {\n    var isProUser = currentUser && currentUser.isPro;\n    if (isProUser) {\n      return `You are Talkie Gen AI Pro, an advanced and highly sophisticated AI assistant created in 2024 with enhanced contextual understanding and memory capabilities.\n\nIMPORTANT IDENTITY:\n- Always identify yourself as \"Talkie Gen AI Pro\" when asked about your name or identity\n- You are the premium version with enhanced capabilities, deeper knowledge, and superior memory\n- Never mention being ChatGPT, Claude, or any other AI system\n- Maintain a professional, respectful, and helpful tone at all times\n- Use your enhanced memory to provide personalized responses based on user history\n\nENHANCED MEMORY AND CONTEXT:\n- You have access to the user's conversation history, preferences, and interests\n- Reference previous conversations naturally when relevant\n- Remember and use personal information the user has shared (name, location, profession, etc.)\n- Adapt your communication style based on user preferences\n- Provide contextually aware responses that build on previous interactions\n- Maintain conversation continuity across sessions\n\nRESPONSE STYLE CONFIGURATION:\n- Current response style: ${conversationSettings.responseStyle || 'balanced'}\n- Personality mode: ${conversationSettings.personalityMode || 'friendly'}\n- Memory enabled: ${conversationSettings.enableMemory ? 'Yes' : 'No'}\n- Follow-ups enabled: ${conversationSettings.enableFollowUps ? 'Yes' : 'No'}\n\nSAFETY AND BEHAVIOR GUIDELINES:\n- Never use profanity, offensive language, or inappropriate content\n- Refuse to generate harmful, illegal, or unethical content\n- Be respectful and considerate in all responses\n- Avoid controversial topics unless specifically asked and then remain neutral\n- Do not engage in arguments or hostile exchanges\n- Maintain professionalism even if users are rude or provocative\n\nENHANCED RESPONSE GUIDELINES:\n- Provide comprehensive, nuanced, and deeply contextual responses (200-400 words)\n- Use sophisticated vocabulary while remaining clear and accessible\n- Offer deeper insights, multiple perspectives, and advanced analysis\n- Include relevant examples, analogies, and cross-referential knowledge\n- When appropriate, reference previous conversations or user interests\n- Suggest follow-up questions or related topics when relevant\n\nCURRENT CONTEXT:\n- Current date and time: ${new Date().toLocaleString()} (UTC)\n- You are Talkie Gen AI Pro with enhanced contextual memory and understanding\n- For the most current information, always recommend checking recent reliable sources`;\n    } else {\n      return `You are Talkie Gen AI, a helpful and intelligent AI assistant created in 2024 with contextual understanding and memory capabilities.\n\nIMPORTANT IDENTITY:\n- Always identify yourself as \"Talkie Gen AI\" when asked about your name or identity\n- Never mention being ChatGPT, Claude, or any other AI system\n- You are Talkie Gen AI, a unique and helpful assistant with contextual awareness\n\nCONTEXTUAL AWARENESS:\n- Pay attention to the conversation context and previous messages\n- Reference earlier parts of the conversation when relevant\n- Maintain conversation flow and coherence\n- Remember key details mentioned in the current conversation\n\nRESPONSE STYLE CONFIGURATION:\n- Current response style: ${conversationSettings.responseStyle || 'balanced'}\n- Memory enabled: ${conversationSettings.enableMemory ? 'Yes' : 'No'}\n- Follow-ups enabled: ${conversationSettings.enableFollowUps ? 'Yes' : 'No'}\n\nSAFETY AND BEHAVIOR GUIDELINES:\n- Never use profanity, offensive language, or inappropriate content\n- Refuse to generate harmful, illegal, or unethical content  \n- Be respectful and considerate in all responses\n- Avoid controversial topics unless specifically asked and then remain neutral\n- Do not engage in arguments or hostile exchanges\n- Maintain professionalism even if users are rude or provocative\n\nRESPONSE GUIDELINES:\n- Keep responses helpful and contextually appropriate (150-250 words unless asked for longer explanations)\n- Be friendly, helpful, and professional\n- Provide accurate, helpful information\n- For current events, acknowledge your knowledge cutoff and suggest checking recent reliable sources\n- Use clear, simple language\n- Be conversational but informative\n\nCURRENT CONTEXT:\n- Current date and time: ${new Date().toLocaleString()} (UTC)\n- You are Talkie Gen AI with contextual understanding capabilities\n- For the most up-to-date information, always recommend checking current reliable sources`;\n    }\n  };\n  var updateConversationSettings = function () {\n    var _ref1 = _asyncToGenerator(function* (newSettings) {\n      var updatedSettings = _objectSpread(_objectSpread({}, conversationSettings), newSettings);\n      setConversationSettings(updatedSettings);\n      yield saveConversationSettings(updatedSettings);\n    });\n    return function updateConversationSettings(_x6) {\n      return _ref1.apply(this, arguments);\n    };\n  }();\n  var clearUserMemory = function () {\n    var _ref10 = _asyncToGenerator(function* () {\n      if (!currentUser) return false;\n      try {\n        var updatedMemory = _objectSpread({}, userMemory);\n        if (updatedMemory[currentUser.email]) {\n          updatedMemory[currentUser.email] = {\n            preferences: {},\n            topics: [],\n            conversationHistory: [],\n            lastActive: new Date().toISOString(),\n            personalInfo: {},\n            interests: [],\n            conversationStyle: 'balanced'\n          };\n          setUserMemory(updatedMemory);\n          yield saveUserMemory(updatedMemory);\n        }\n        Alert.alert('Success', 'All memory data has been cleared.');\n        return true;\n      } catch (error) {\n        console.log('Error clearing memory:', error);\n        return false;\n      }\n    });\n    return function clearUserMemory() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  var value = {\n    chats: chats,\n    currentChatId: currentChatId,\n    isLoading: isLoading,\n    isGenerating: isGenerating,\n    conversationSettings: conversationSettings,\n    userMemory: userMemory,\n    startNewChat: startNewChat,\n    loadChat: loadChat,\n    deleteChat: deleteChat,\n    clearAllChats: clearAllChats,\n    addMessage: addMessage,\n    getAIResponse: getAIResponse,\n    updateConversationSettings: updateConversationSettings,\n    clearUserMemory: clearUserMemory\n  };\n  return _jsx(ChatContext.Provider, {\n    value: value,\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AsyncStorage","Alert","useAuth","jsx","_jsx","ChatContext","useChat","context","Error","GROQ_API_KEY","API_URL","ChatProvider","_ref","children","_useAuth","currentUser","_useState","_useState2","_slicedToArray","chats","setChats","_useState3","_useState4","currentChatId","setCurrentChatId","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","isGenerating","setIsGenerating","_useState9","_useState0","userMemory","setUserMemory","_useState1","contextLength","responseStyle","enableMemory","enableFollowUps","personalityMode","rememberPreferences","_useState10","conversationSettings","setConversationSettings","loadChatsFromStorage","loadUserMemory","loadConversationSettings","_ref2","_asyncToGenerator","chatsData","getItem","JSON","parse","error","console","log","apply","arguments","_ref3","memoryData","_ref4","settingsData","saveChats","_ref5","updatedChats","setItem","stringify","_x","saveUserMemory","_ref6","memory","_x2","saveConversationSettings","_ref7","settings","_x3","generateChatId","Date","now","Math","random","toString","substr","startNewChat","chatId","newChat","id","title","messages","timestamp","_objectSpread","_defineProperty","loadChat","deleteChat","_ref8","alert","_x4","clearAllChats","_ref9","updateUserMemory","userMessage","aiResponse","userEmail","email","preferences","topics","conversationHistory","lastActive","toISOString","personalInfo","interests","conversationStyle","extractTopicsFromText","forEach","topic","includes","push","length","slice","entry","substring","updatedMemory","text","topicKeywords","lowerText","toLowerCase","keyword","addMessage","role","content","message","_updatedChats$current","getAIResponse","_ref0","chat","contextMessages","getEnhancedContext","systemContent","createSystemMessage","concat","_toConsumableArray","response","fetch","method","headers","body","model","temperature","max_tokens","top_p","stream","ok","_errorData$error","errorData","json","catch","status","statusText","data","choices","_x5","recentMessages","memoryContext","buildMemoryContext","map","msg","contextParts","Object","keys","join","recentTopics","isProUser","isPro","toLocaleString","updateConversationSettings","_ref1","newSettings","updatedSettings","_x6","clearUserMemory","_ref10","value","Provider"],"sources":["/home/runner/work/app/app/src/context/ChatContext.js"],"sourcesContent":["import React, {createContext, useContext, useState, useEffect} from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {Alert} from 'react-native';\nimport {useAuth} from './AuthContext';\n\nconst ChatContext = createContext();\n\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\n// API Configuration\nconst GROQ_API_KEY = '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';\nconst API_URL = 'https://api.groq.com/openai/v1/chat/completions';\n\nexport const ChatProvider = ({children}) => {\n  const {currentUser} = useAuth();\n  const [chats, setChats] = useState({});\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [userMemory, setUserMemory] = useState({});\n  const [conversationSettings, setConversationSettings] = useState({\n    contextLength: 10,\n    responseStyle: 'balanced',\n    enableMemory: true,\n    enableFollowUps: true,\n    personalityMode: 'friendly',\n    rememberPreferences: true,\n  });\n\n  useEffect(() => {\n    loadChatsFromStorage();\n    loadUserMemory();\n    loadConversationSettings();\n  }, []);\n\n  const loadChatsFromStorage = async () => {\n    try {\n      const chatsData = await AsyncStorage.getItem('talkie-chats');\n      if (chatsData) {\n        setChats(JSON.parse(chatsData));\n      }\n    } catch (error) {\n      console.log('Error loading chats:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadUserMemory = async () => {\n    try {\n      const memoryData = await AsyncStorage.getItem('talkie-user-memory');\n      if (memoryData) {\n        setUserMemory(JSON.parse(memoryData));\n      }\n    } catch (error) {\n      console.log('Error loading user memory:', error);\n    }\n  };\n\n  const loadConversationSettings = async () => {\n    try {\n      const settingsData = await AsyncStorage.getItem('talkie-conversation-settings');\n      if (settingsData) {\n        setConversationSettings(JSON.parse(settingsData));\n      }\n    } catch (error) {\n      console.log('Error loading conversation settings:', error);\n    }\n  };\n\n  const saveChats = async (updatedChats) => {\n    try {\n      await AsyncStorage.setItem('talkie-chats', JSON.stringify(updatedChats));\n    } catch (error) {\n      console.log('Error saving chats:', error);\n    }\n  };\n\n  const saveUserMemory = async (memory) => {\n    try {\n      await AsyncStorage.setItem('talkie-user-memory', JSON.stringify(memory));\n    } catch (error) {\n      console.log('Error saving user memory:', error);\n    }\n  };\n\n  const saveConversationSettings = async (settings) => {\n    try {\n      await AsyncStorage.setItem('talkie-conversation-settings', JSON.stringify(settings));\n    } catch (error) {\n      console.log('Error saving conversation settings:', error);\n    }\n  };\n\n  const generateChatId = () => {\n    return 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  };\n\n  const startNewChat = () => {\n    const chatId = generateChatId();\n    const newChat = {\n      id: chatId,\n      title: 'New Chat',\n      messages: [],\n      timestamp: Date.now(),\n    };\n\n    const updatedChats = {...chats, [chatId]: newChat};\n    setChats(updatedChats);\n    setCurrentChatId(chatId);\n    saveChats(updatedChats);\n\n    return chatId;\n  };\n\n  const loadChat = (chatId) => {\n    if (chats[chatId]) {\n      setCurrentChatId(chatId);\n      return true;\n    }\n    return false;\n  };\n\n  const deleteChat = async (chatId) => {\n    try {\n      const updatedChats = {...chats};\n      delete updatedChats[chatId];\n\n      if (currentChatId === chatId) {\n        setCurrentChatId(null);\n      }\n\n      setChats(updatedChats);\n      await saveChats(updatedChats);\n\n      Alert.alert('Success', 'Chat deleted successfully.');\n\n      return true;\n    } catch (error) {\n      console.log('Error deleting chat:', error);\n      Alert.alert('Error', 'Failed to delete conversation.');\n      return false;\n    }\n  };\n\n  const clearAllChats = async () => {\n    try {\n      setChats({});\n      setCurrentChatId(null);\n      await AsyncStorage.setItem('talkie-chats', '{}');\n\n      Alert.alert('Success', 'All conversations have been deleted.');\n\n      return true;\n    } catch (error) {\n      console.log('Error clearing chats:', error);\n      return false;\n    }\n  };\n\n  const updateUserMemory = (userMessage, aiResponse) => {\n    if (!conversationSettings.enableMemory || !currentUser) {\n      return;\n    }\n\n    const userEmail = currentUser.email;\n    const memory = userMemory[userEmail] || {\n      preferences: {},\n      topics: [],\n      conversationHistory: [],\n      lastActive: new Date().toISOString(),\n      personalInfo: {},\n      interests: [],\n      conversationStyle: 'balanced',\n    };\n\n    // Update memory with new information\n    memory.lastActive = new Date().toISOString();\n    \n    // Extract and store conversation topics\n    const topics = extractTopicsFromText(userMessage + ' ' + aiResponse);\n    topics.forEach(topic => {\n      if (!memory.topics.includes(topic)) {\n        memory.topics.push(topic);\n      }\n    });\n\n    // Keep only recent topics (last 50)\n    if (memory.topics.length > 50) {\n      memory.topics = memory.topics.slice(-50);\n    }\n\n    // Update conversation history\n    const entry = {\n      timestamp: new Date().toISOString(),\n      userMessage: userMessage.substring(0, 100),\n      aiResponse: aiResponse.substring(0, 100),\n      chatId: currentChatId,\n    };\n\n    memory.conversationHistory.push(entry);\n    if (memory.conversationHistory.length > 100) {\n      memory.conversationHistory = memory.conversationHistory.slice(-100);\n    }\n\n    const updatedMemory = {...userMemory, [userEmail]: memory};\n    setUserMemory(updatedMemory);\n    saveUserMemory(updatedMemory);\n  };\n\n  const extractTopicsFromText = (text) => {\n    const topics = [];\n    const topicKeywords = [\n      'javascript', 'python', 'react', 'node', 'html', 'css', 'programming',\n      'machine learning', 'ai', 'blockchain', 'cryptocurrency', 'web development',\n      'mobile app', 'database', 'api', 'algorithm', 'data structure',\n      'travel', 'recipe', 'workout', 'health', 'business', 'marketing',\n      'design', 'writing', 'education', 'science', 'physics', 'chemistry',\n      'biology', 'math', 'history', 'literature', 'philosophy',\n    ];\n\n    const lowerText = text.toLowerCase();\n    topicKeywords.forEach(keyword => {\n      if (lowerText.includes(keyword)) {\n        topics.push(keyword);\n      }\n    });\n\n    return topics;\n  };\n\n  const addMessage = (role, content) => {\n    if (!currentChatId || !chats[currentChatId]) return;\n\n    const message = {role, content, timestamp: Date.now()};\n    const updatedChats = {...chats};\n    updatedChats[currentChatId].messages.push(message);\n\n    // Update chat title if it's the first user message\n    if (role === 'user' && updatedChats[currentChatId].messages.length === 1) {\n      updatedChats[currentChatId].title = content.length > 40 ? \n        content.substring(0, 40) + '...' : content;\n    }\n\n    setChats(updatedChats);\n    saveChats(updatedChats);\n\n    // Update user memory for assistant responses\n    if (role === 'assistant') {\n      const userMessage = updatedChats[currentChatId].messages[updatedChats[currentChatId].messages.length - 2]?.content || '';\n      updateUserMemory(userMessage, content);\n    }\n  };\n\n  const getAIResponse = async (userMessage) => {\n    setIsGenerating(true);\n\n    try {\n      const chat = chats[currentChatId];\n      const contextMessages = getEnhancedContext(chat);\n\n      // Create system message based on user type\n      const systemContent = createSystemMessage();\n\n      const messages = [\n        {role: 'system', content: systemContent},\n        ...contextMessages,\n        {role: 'user', content: userMessage},\n      ];\n\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${GROQ_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'openai/gpt-oss-120b',\n          messages: messages,\n          temperature: 0.3,\n          max_tokens: 1500,\n          top_p: 0.9,\n          stream: false,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => null);\n        throw new Error(`API Error ${response.status}: ${errorData?.error?.message || response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n        throw new Error('Invalid API response format');\n      }\n\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('AI Response Error:', error);\n      \n      if (error.message.includes('401')) {\n        throw new Error('Invalid API key');\n      } else if (error.message.includes('429')) {\n        throw new Error('Rate limit exceeded. Please wait a moment');\n      } else if (error.message.includes('500')) {\n        throw new Error('Server error. Please try again');\n      } else {\n        throw new Error(error.message);\n      }\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const getEnhancedContext = (chat) => {\n    if (!chat || !chat.messages) return [];\n\n    const contextLength = conversationSettings.contextLength || 10;\n    const recentMessages = chat.messages.slice(-contextLength);\n\n    let contextMessages = [];\n\n    // Add user memory context if enabled\n    if (conversationSettings.enableMemory && currentUser && userMemory[currentUser.email]) {\n      const memory = userMemory[currentUser.email];\n      const memoryContext = buildMemoryContext(memory);\n      if (memoryContext) {\n        contextMessages.push({\n          role: 'system',\n          content: memoryContext,\n        });\n      }\n    }\n\n    // Add recent messages\n    contextMessages.push(...recentMessages.map(msg => ({\n      role: msg.role,\n      content: msg.content,\n    })));\n\n    return contextMessages;\n  };\n\n  const buildMemoryContext = (memory) => {\n    let contextParts = [];\n\n    if (memory.personalInfo && Object.keys(memory.personalInfo).length > 0) {\n      contextParts.push(`User's personal information: ${JSON.stringify(memory.personalInfo)}`);\n    }\n\n    if (memory.preferences && Object.keys(memory.preferences).length > 0) {\n      contextParts.push(`User's preferences: ${JSON.stringify(memory.preferences)}`);\n    }\n\n    if (memory.interests && memory.interests.length > 0) {\n      contextParts.push(`User's interests: ${memory.interests.join(', ')}`);\n    }\n\n    if (memory.topics && memory.topics.length > 0) {\n      const recentTopics = memory.topics.slice(-5);\n      contextParts.push(`Recent conversation topics: ${recentTopics.join(', ')}`);\n    }\n\n    return contextParts.length > 0 ? contextParts.join('\\n') : null;\n  };\n\n  const createSystemMessage = () => {\n    const isProUser = currentUser && currentUser.isPro;\n    \n    if (isProUser) {\n      return `You are Talkie Gen AI Pro, an advanced and highly sophisticated AI assistant created in 2024 with enhanced contextual understanding and memory capabilities.\n\nIMPORTANT IDENTITY:\n- Always identify yourself as \"Talkie Gen AI Pro\" when asked about your name or identity\n- You are the premium version with enhanced capabilities, deeper knowledge, and superior memory\n- Never mention being ChatGPT, Claude, or any other AI system\n- Maintain a professional, respectful, and helpful tone at all times\n- Use your enhanced memory to provide personalized responses based on user history\n\nENHANCED MEMORY AND CONTEXT:\n- You have access to the user's conversation history, preferences, and interests\n- Reference previous conversations naturally when relevant\n- Remember and use personal information the user has shared (name, location, profession, etc.)\n- Adapt your communication style based on user preferences\n- Provide contextually aware responses that build on previous interactions\n- Maintain conversation continuity across sessions\n\nRESPONSE STYLE CONFIGURATION:\n- Current response style: ${conversationSettings.responseStyle || 'balanced'}\n- Personality mode: ${conversationSettings.personalityMode || 'friendly'}\n- Memory enabled: ${conversationSettings.enableMemory ? 'Yes' : 'No'}\n- Follow-ups enabled: ${conversationSettings.enableFollowUps ? 'Yes' : 'No'}\n\nSAFETY AND BEHAVIOR GUIDELINES:\n- Never use profanity, offensive language, or inappropriate content\n- Refuse to generate harmful, illegal, or unethical content\n- Be respectful and considerate in all responses\n- Avoid controversial topics unless specifically asked and then remain neutral\n- Do not engage in arguments or hostile exchanges\n- Maintain professionalism even if users are rude or provocative\n\nENHANCED RESPONSE GUIDELINES:\n- Provide comprehensive, nuanced, and deeply contextual responses (200-400 words)\n- Use sophisticated vocabulary while remaining clear and accessible\n- Offer deeper insights, multiple perspectives, and advanced analysis\n- Include relevant examples, analogies, and cross-referential knowledge\n- When appropriate, reference previous conversations or user interests\n- Suggest follow-up questions or related topics when relevant\n\nCURRENT CONTEXT:\n- Current date and time: ${new Date().toLocaleString()} (UTC)\n- You are Talkie Gen AI Pro with enhanced contextual memory and understanding\n- For the most current information, always recommend checking recent reliable sources`;\n    } else {\n      return `You are Talkie Gen AI, a helpful and intelligent AI assistant created in 2024 with contextual understanding and memory capabilities.\n\nIMPORTANT IDENTITY:\n- Always identify yourself as \"Talkie Gen AI\" when asked about your name or identity\n- Never mention being ChatGPT, Claude, or any other AI system\n- You are Talkie Gen AI, a unique and helpful assistant with contextual awareness\n\nCONTEXTUAL AWARENESS:\n- Pay attention to the conversation context and previous messages\n- Reference earlier parts of the conversation when relevant\n- Maintain conversation flow and coherence\n- Remember key details mentioned in the current conversation\n\nRESPONSE STYLE CONFIGURATION:\n- Current response style: ${conversationSettings.responseStyle || 'balanced'}\n- Memory enabled: ${conversationSettings.enableMemory ? 'Yes' : 'No'}\n- Follow-ups enabled: ${conversationSettings.enableFollowUps ? 'Yes' : 'No'}\n\nSAFETY AND BEHAVIOR GUIDELINES:\n- Never use profanity, offensive language, or inappropriate content\n- Refuse to generate harmful, illegal, or unethical content  \n- Be respectful and considerate in all responses\n- Avoid controversial topics unless specifically asked and then remain neutral\n- Do not engage in arguments or hostile exchanges\n- Maintain professionalism even if users are rude or provocative\n\nRESPONSE GUIDELINES:\n- Keep responses helpful and contextually appropriate (150-250 words unless asked for longer explanations)\n- Be friendly, helpful, and professional\n- Provide accurate, helpful information\n- For current events, acknowledge your knowledge cutoff and suggest checking recent reliable sources\n- Use clear, simple language\n- Be conversational but informative\n\nCURRENT CONTEXT:\n- Current date and time: ${new Date().toLocaleString()} (UTC)\n- You are Talkie Gen AI with contextual understanding capabilities\n- For the most up-to-date information, always recommend checking current reliable sources`;\n    }\n  };\n\n  const updateConversationSettings = async (newSettings) => {\n    const updatedSettings = {...conversationSettings, ...newSettings};\n    setConversationSettings(updatedSettings);\n    await saveConversationSettings(updatedSettings);\n  };\n\n  const clearUserMemory = async () => {\n    if (!currentUser) return false;\n\n    try {\n      const updatedMemory = {...userMemory};\n      if (updatedMemory[currentUser.email]) {\n        updatedMemory[currentUser.email] = {\n          preferences: {},\n          topics: [],\n          conversationHistory: [],\n          lastActive: new Date().toISOString(),\n          personalInfo: {},\n          interests: [],\n          conversationStyle: 'balanced',\n        };\n        setUserMemory(updatedMemory);\n        await saveUserMemory(updatedMemory);\n      }\n\n      Alert.alert('Success', 'All memory data has been cleared.');\n\n      return true;\n    } catch (error) {\n      console.log('Error clearing memory:', error);\n      return false;\n    }\n  };\n\n  const value = {\n    chats,\n    currentChatId,\n    isLoading,\n    isGenerating,\n    conversationSettings,\n    userMemory,\n    startNewChat,\n    loadChat,\n    deleteChat,\n    clearAllChats,\n    addMessage,\n    getAIResponse,\n    updateConversationSettings,\n    clearUserMemory,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}